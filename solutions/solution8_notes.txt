// Code 
341519600757fd5b3660006000373660006000f047600060006000600047865af1600114602857fd5b4714602f57fd5b00

############
# Puzzle 8 #
############

00      34        CALLVALUE
01      15        ISZERO
02      19        NOT
03      6007      PUSH1 07
05      57        JUMPI         // JUMP to 07 only if CALLVALUE is ZERO
06      FD        REVERT
07      5B        JUMPDEST
08      36        CALLDATASIZE
09      6000      PUSH1 00
0B      6000      PUSH1 00
0D      37        CALLDATACOPY
0E      36        CALLDATASIZE
0F      6000      PUSH1 00
11      6000      PUSH1 00
13      F0        CREATE            // Create a contract, memory has init code 

14      47        SELFBALANCE       // Returns balance
15      6000      PUSH1 00
17      6000      PUSH1 00
19      6000      PUSH1 00
1B      6000      PUSH1 00
1D      47        SELFBALANCE       
1E      86        DUP7
1F      5A        GAS
20      F1        CALL              <-- CALL to contract, contract code grabs value and sends to new contract CREATE
21      6001      PUSH1 01
23      14        EQ
24      6028      PUSH1 28
26      57        JUMPI
27      FD        REVERT
28      5B        JUMPDEST
29      47        SELFBALANCE          // At this point balance should be 00 

2A      14        EQ
2B      602F      PUSH1 2F
2D      57        JUMPI
2E      FD        REVERT
2F      5B        JUMPDEST
30      00        STOP

// So here we need to CREATE a contract with such calldata 
// That has a function - receive function may be - code that gets executed 
// when contract is called 
// so on CALL (20) - value should be transfered to another created contract within init code like we did in previous puzzle 

// Create a packer 
0x600a600c60003960026000f3
// init code 
600060006069F0   - push last 69 as value to be passed to CREATE <- no idea why I chose this value, but anything can work here

// final code 
0x6007600C60003960076000F3600060006069F0